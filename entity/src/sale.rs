//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.8

use sea_orm::entity::prelude::*;
use uuid::Uuid;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "sale")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false, column_type = "Binary(16)")]
    pub uuid: Uuid,
    pub id_mercado_pago: Option<u32>,
    #[sea_orm(column_type = "Decimal(Some((10, 0)))")]
    pub total_price: Decimal,
    pub was_collected: bool,
    pub delivered_by: u32,
    pub money_kept: bool,
    pub required_refunded: bool,
    pub was_refunded: bool,
    pub created_at: Date,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::product_campaign_sale::Entity")]
    ProductCampaignSale,
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::DeliveredBy",
        to = "super::user::Column::Id",
        on_update = "Restrict",
        on_delete = "Restrict"
    )]
    User,
}

impl Related<super::product_campaign_sale::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ProductCampaignSale.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
