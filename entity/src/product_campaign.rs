//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.8

use sea_orm::entity::prelude::*;
use uuid::Uuid;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "product_campaign")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false, column_type = "Binary(16)")]
    pub uuid: Uuid,
    #[sea_orm(column_type = "Decimal(Some((10, 0)))")]
    pub price: Decimal,
    pub units: u32,
    pub extra_units: u32,
    #[sea_orm(column_type = "Binary(16)")]
    pub id_product: Uuid,
    #[sea_orm(column_type = "Binary(16)")]
    pub id_campaign: Uuid,
    pub created_at: DateTimeUtc,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::campaign::Entity",
        from = "Column::IdCampaign",
        to = "super::campaign::Column::Uuid",
        on_update = "Restrict",
        on_delete = "Restrict"
    )]
    Campaign,
    #[sea_orm(
        belongs_to = "super::product::Entity",
        from = "Column::IdProduct",
        to = "super::product::Column::Uuid",
        on_update = "Restrict",
        on_delete = "Restrict"
    )]
    Product,
    #[sea_orm(has_many = "super::product_campaign_sale::Entity")]
    ProductCampaignSale,
}

impl Related<super::campaign::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Campaign.def()
    }
}

impl Related<super::product::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Product.def()
    }
}

impl Related<super::product_campaign_sale::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ProductCampaignSale.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
